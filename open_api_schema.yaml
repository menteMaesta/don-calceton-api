openapi: 3.0.0
info:
  title: Don calceton API - OpenAPI 3.0
  description: api for don calceton
  contact:
    email: paulagomenr@gmail.com
  license:
    name: MIT License
  version: 1.0.0

servers:
  - url: http://127.0.0.1:3333

tags:
  - name: products
    description: Operations for products
  - name: variants
    description: Operations for product variants
  - name: images
    description: Operations for variant images
  - name: users
    description: Operation for users
  - name: login
    description: Operations for tokens

paths:
  /api/products:
    get:
      tags:
        - products
      summary: Returns all products
      description: Returns all products with one variant
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductListItem'
    post:
      tags:
        - products
      summary: Add a new product to the store
      description: Add a new product
      parameters:
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: Store a new product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReq'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
  /api/products/{id}:
    get:
      tags:
        - products
      summary: Returns specific product
      description: Returns one product with variants
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductVariant'
    put:
      tags:
        - products
      summary: update a product
      description: update a product
      parameters:
        - name: id
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: update a product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductReq'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags:
        - products
      summary: Deletes a product
      description: delete a product
      parameters:
        - name: id
          in: path
          description: 'id of the product to delete'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/all_variants:
    get:
      tags:
        - variants
      summary: Returns all variants regardless of product
      description: Returns all variants regardless of product
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VariantListItem'
  /api/cart_items:
    post:
      tags:
        - variants
      summary: Returns all variants listed on variantIds
      description: Returns all variants listed on variantIds with images
      requestBody:
        description: list of variant ids
        content:
          application/json:
            schema:
              type: object
              properties:
                variantIds:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variant'
  /api/products/{product_id}/variants:
    get:
      tags:
        - variants
      summary: Returns all variants
      description: Returns all variants of one product
      parameters:
        - name: product_id
          in: path
          description: 'id of the product'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variant'
    post:
      tags:
        - variants
      summary: Add a new variant
      description: Add a new variant to the product
      parameters:
        - name: product_id
          in: path
          description: 'id of the product'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: Store a new variant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantReq'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
            application/xml:
              schema:
                $ref: '#/components/schemas/Variant'
  /api/products/{product_id}/variants/{id}:
    get:
      tags:
        - variants
      summary: Returns specific variant
      description: Returns one variants with images (todo)
      parameters:
        - name: product_id
          in: path
          description: ID of product
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: ID of variant to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
    put:
      tags:
        - variants
      summary: update a variant
      description: update a variant
      parameters:
        - name: product_id
          in: path
          description: ID of product
          required: true
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          description: ID of variant to update
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: update a variant
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VariantReq'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variant'
            application/xml:
              schema:
                $ref: '#/components/schemas/Variant'
    delete:
      tags:
        - variants
      summary: Deletes a variant
      description: delete a variant
      parameters:
        - name: product_id
          in: path
          description: 'id of the product'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: 'id of the variant to delete'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/variants/{id}/images:
    post:
      tags:
        - images
      summary: Add a new image
      description: Add a new image to the product variant
      parameters:
        - name: id
          in: path
          description: 'id of the variant'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: Store a new image for a variant
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageReq'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            application/xml:
              schema:
                $ref: '#/components/schemas/Image'
  /api/variants/{id}/bulk/images:
    post:
      tags:
        - images
      summary: Add multiple new images to the same variant
      description: Add many images to one product variant
      parameters:
        - name: id
          in: path
          description: 'id of the variant'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: Store many images for a variant
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImageReq'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            application/xml:
              schema:
                $ref: '#/components/schemas/Image'
  /api/variants/{variant_id}/images/{id}:
    put:
      tags:
        - images
      summary: Edit an image
      description: Edit an image
      parameters:
        - name: variant_id
          in: path
          description: 'id of the variant'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: 'id of the image'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: Edit an image for a variant
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageReq'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            application/xml:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ENOENT: no such file or directory, unlink 'uploads/ijsyiuukbmgzdbx196rfk6ed.png'"
    delete:
      tags:
        - images
      summary: Remove an image
      description: Remove an image
      parameters:
        - name: variant_id
          in: path
          description: 'id of the variant'
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: 'id of the image'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ENOENT: no such file or directory, unlink 'uploads/ijsyiuukbmgzdbx196rfk6ed.png'"
  # /api/users:
  # post:
  #   tags:
  #     - users
  #   summary: Add a new user
  #   description: Add a new user
  #   requestBody:
  #     description: Store a new user
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/UserReq'
  #     required: true
  #   responses:
  #     '200':
  #       description: Successful operation
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/xml:
  #           schema:
  #             $ref: '#/components/schemas/User'
  /api/users/{id}:
    put:
      tags:
        - users
      summary: update a user
      description: update a user
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      requestBody:
        description: update a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBase'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - users
      summary: Deletes a user
      description: delete a user
      parameters:
        - name: id
          in: path
          description: 'id of the user'
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                example:
                  - 'id of deleted user: id'
  /api/validate_credentials:
    get:
      tags:
        - users
      summary: Add a new user
      description: Add a new user
      parameters:
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /api/login:
    post:
      tags:
        - tokens
      summary: Get token
      description: Givin user data get access token
      requestBody:
        description: user credentials
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  'type':
                    type: string
                  token:
                    type: string
                  expiresAt:
                    type: string
            application/xml:
              schema:
                type: object
                properties:
                  'type':
                    type: string
                  token:
                    type: string
                  expiresAt:
                    type: string
  /api/logout:
    delete:
      tags:
        - users
      summary: Deletes a user
      description: delete a user
      parameters:
        - name: Authorization
          in: header
          description: 'bearer token'
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                example:
                  - 'Logout success'
  /api/forgot_password:
    post:
      tags:
        - tokens
      summary: Send email to update password
      description: Send email with update password instructions
      requestBody:
        description: send email to update password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
                example: Success
  /api/update_password:
    post:
      tags:
        - tokens
      summary: Changes user's password
      description: Changes user's password if the token sent is valid
      requestBody:
        description: validates token to update password
        content:
          application/json:
            schema:
              type: object
              properties:
                forgotToken:
                  type: string
                newPassword:
                  type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      required:
        - id
        - email
      type: object
      properties:
        id:
          type: integer
          format: int64
        fullName:
          type: string
        email:
          type: string
        admin:
          type: boolean
    UserReq:
      required:
        - email
        - password
      allOf:
        - $ref: '#/components/schemas/UserBase'
      type: object
      properties:
        email:
          type: string
    UserBase:
      type: object
      properties:
        password:
          type: string
        fullName:
          type: string
        admin:
          type: boolean
    ProductVariant:
      allOf:
        - $ref: '#/components/schemas/Product'
      properties:
        variants:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Variant'
            properties:
              images:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
    ProductListItem:
      allOf:
        - $ref: '#/components/schemas/Product'
      properties:
        variants:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
    Product:
      required:
        - id
        - name
        - price
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        wholesalePrice:
          type: number
          format: float
        createdAt:
          type: string
        updatedAt:
          type: string
    ProductReq:
      required:
        - name
        - price
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        wholesalePrice:
          type: number
          format: float
    VariantListItem:
      allOf:
        - $ref: '#/components/schemas/Variant'
      properties:
        images:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
        productName:
          type: string
        productPrice:
          type: number
          format: float
        productWholesalePrice:
          type: number
          format: float
    Variant:
      required:
        - id
        - name
        - quantity
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
        createdAt:
          type: string
        updatedAt:
          type: string
    VariantReq:
      required:
        - name
        - quantity
      type: object
      properties:
        name:
          type: string
        quantity:
          type: integer
          format: int64
    Image:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        variant_id:
          type: integer
          format: int64
        createdAt:
          type: string
        updatedAt:
          type: string
    ImageReq:
      type: object
      properties:
        image:
          type: string
          format: binary
